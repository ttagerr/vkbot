import os
import gspread
import vk_api
from vk_api.longpoll import VkLongPoll, VkEventType
from dotenv import load_dotenv
from messages import ask_question, correct_city_name
from email_sender import send_email

load_dotenv()

# –ó–∞–≥—Ä—É–∑–∫–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
gc = gspread.service_account(filename='C:\\Users\\–ü—Ä–∏–º–µ—Ä\\creds.json') #—É–∫–∞–∑–∞—Ç—å —Å–≤–æ–π –ø—É—Ç—å –¥–æ —Ñ–∞–π–ª–∞ cred.json
cities_ws = gc.open('–ö–æ–ø–∏—è –°–±–æ—Ä –∞–Ω–∫–µ—Ç').worksheet('–ö–æ–ø–∏—è —Å–ø–∏—Å–æ–∫ –ø–æ—á—Ç —Å –≥–æ—Ä–æ–¥–∞–º–∏') # —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–∏ —Ç–∞–±–ª–∏—Ü—ã –∏ –ª–∏—Å—Ç—ã —É–∫–∞–∑–∞–Ω–æ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞

def get_cities_list():
    cities_data = cities_ws.get_all_records()
    cities = {record['–ì–æ—Ä–æ–¥']: record['–°–ø–∏—Å–æ–∫ –ø–æ—á—Ç –ø–æ –≥–æ—Ä–æ–¥–∞–º'] for record in cities_data if '–ì–æ—Ä–æ–¥' in record and '–°–ø–∏—Å–æ–∫ –ø–æ—á—Ç –ø–æ –≥–æ—Ä–æ–¥–∞–º' in record}
    return cities

def main():
    vk_session = vk_api.VkApi(token=os.getenv('VK_TOKEN'))
    vk = vk_session.get_api()
    longpoll = VkLongPoll(vk_session)
    cities = get_cities_list()
    states = {}

    for event in longpoll.listen():
        if event.type == VkEventType.MESSAGE_NEW and event.to_me and event.text:
            user_id = event.user_id
            user_message = event.text.strip().lower()

            if user_id not in states:
                states[user_id] = {
                    "name": None,
                    "phone": None,
                    "city": None,
                    "email": None,
                    "experience_repair": None,
                    "experience_clients": None,
                    "confirmation": None
                }

            if user_message == '–Ω–∞—á–∞—Ç—å':
                ask_question(vk, user_id, "–í–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –§–ò–û?")
                states[user_id] = {
                    "name": None,
                    "phone": None,
                    "city": None,
                    "email": None,
                    "experience_repair": None,
                    "experience_clients": None,
                    "confirmation": None
                }
            elif states[user_id]["name"] is None:
                states[user_id]["name"] = user_message
                ask_question(vk, user_id, "–í–≤–µ–¥–∏—Ç–µ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
            elif states[user_id]["phone"] is None:
                states[user_id]["phone"] = user_message
                ask_question(vk, user_id, "–í–≤–µ–¥–∏—Ç–µ –í–∞—à –≥–æ—Ä–æ–¥:")
            elif states[user_id]["city"] is None:
                corrected_city = correct_city_name(user_message, cities)
                if corrected_city:
                    states[user_id]["city"] = corrected_city
                    ask_question(vk, user_id, "–£–∫–∞–∂–∏—Ç–µ –í–∞—à—É –ø–æ—á—Ç—É:")
                else:
                    ask_question(vk, user_id, "–¢–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")
            elif states[user_id]["email"] is None:
                states[user_id]["email"] = user_message
                ask_question(vk, user_id, "–ï—Å—Ç—å –ª–∏ —É –í–∞—Å –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –≤ —Ä–µ–º–æ–Ω—Ç–µ –∏ —Ä–∞–±–æ—Ç–µ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏? (–î–∞/–ù–µ—Ç)")
            elif states[user_id]["experience_repair"] is None:
                states[user_id]["experience_repair"] = user_message
                ask_question(vk, user_id, "–û–∂–∏–¥–∞–µ–º—ã–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫:")
            elif states[user_id]["experience_clients"] is None:
                states[user_id]["experience_clients"] = user_message
                summary = (
    f"–î–∞–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:\n"
    f"üë§ –ò–º—è: {states[user_id]['name']}\n"
    f"üèôÔ∏è –ì–æ—Ä–æ–¥: {states[user_id]['city']}\n"
    f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {states[user_id]['phone']}\n"
    f"üìß Email: {states[user_id]['email']}\n"
    f"üîß –û–ø—ã—Ç –≤ —Ä–µ–º–æ–Ω—Ç–µ –∏ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏: {states[user_id]['experience_repair']}\n"
    f"üí≤ –û–∂–∏–¥–∞–µ–º—ã–π –¥–æ—Ö–æ–¥: {states[user_id]['experience_clients']}\n"
   
)

                ask_question(vk, user_id, summary + " –í—Å–µ –≤–µ—Ä–Ω–æ? –ù–∞–ø–∏—à–∏—Ç–µ '–î–∞' –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ '–ù–µ—Ç' –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.")
            elif states[user_id]["confirmation"] is None:
                if user_message == '–¥–∞':
                    city_email = cities[states[user_id]["city"]]  # –ü–æ–ª—É—á–∞–µ–º email –ø–æ –≥–æ—Ä–æ–¥—É
                    subject = '–î–∞–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã'
                    send_email(city_email, subject, summary)
                    ask_question(vk, user_id, "–°–ø–∞—Å–∏–±–æ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã, —Å–≤—è–∂–µ–º—Å—è —Å –í–∞–º–∏ –ø–æ—Å–ª–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –í–∞—à–µ–π –∑–∞—è–≤–∫–∏.")
                    del states[user_id]
                elif user_message == '–Ω–µ—Ç':
                    del states[user_id]
                    ask_question(vk, user_id, "–û–ø—Ä–æ—Å —Å–±—Ä–æ—à–µ–Ω. –ß—Ç–æ–±—ã –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø–∏—à–∏—Ç–µ '–ù–∞—á–∞—Ç—å'.")

if __name__ == "__main__":
    main()
